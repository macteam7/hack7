#include "application.h"

//---------------------------ADD ublox-gps LIB source here-----

#define __AVR_ATmega1280__  1    // this is needed so that we can use the serial1 to connect the GPS

#define UBX_MAXPAYLOAD 60

class GPS_UBLOX_Class
{
  private:
    // Internal variables
	uint8_t ck_a;     // Packet checksum
	uint8_t ck_b;
	uint8_t UBX_step;
	uint8_t UBX_class;
	uint8_t UBX_id;
	uint8_t UBX_payload_length_hi;
	uint8_t UBX_payload_length_lo;
	uint8_t UBX_payload_counter;
	uint8_t UBX_buffer[UBX_MAXPAYLOAD];
	uint8_t UBX_ck_a;
	uint8_t UBX_ck_b;
	long GPS_timer;
	long UBX_ecefVZ;
	void parse_ubx_gps();
	void ubx_checksum(unsigned char ubx_data);
	long join_4_bytes(unsigned char Buffer[]);

  public:
    // Methods
	GPS_UBLOX_Class();
	void Init();
	void Read();
	// Properties
	long Time;          //GPS Millisecond Time of Week
	long Lattitude;     // Geographic coordinates
	long Longitude;
	long Altitude;
	long Ground_Speed;
	long Speed_3d;      //Speed (3-D)
	long Ground_Course;
	uint8_t NumSats;      // Number of visible satelites
	uint8_t Fix;        // 1:GPS FIX   0:No FIX (normal logic)
	uint8_t NewData;    // 1:New GPS Data
	uint8_t PrintErrors; // 1: To Print GPS Errors (for debug)
};


// Constructors ////////////////////////////////////////////////////////////////
GPS_UBLOX_Class::GPS_UBLOX_Class()
{
}


// Public Methods //////////////////////////////////////////////////////////////
void GPS_UBLOX_Class::Init(void)
{
	ck_a=0;
	ck_b=0;
	UBX_step=0;
	NewData=0;
	Fix=0;
	PrintErrors=0;
	GPS_timer=millis();   //Restarting timer...
	// Initialize serial port
	#if defined(__AVR_ATmega1280__)
		Serial1.begin(38400);         // Serial port 1 on ATMega1280
	#else
		Serial.begin(38400);
	#endif
}

// optimization : This code don´t wait for data, only proccess the data available
// We can call this function on the main loop (50Hz loop)
// If we get a complete packet this function calls parse_ubx_gps() to parse and update the GPS info.
void GPS_UBLOX_Class::Read(void)
{
  static unsigned long GPS_timer=0;
  byte data;
  int numc;
  
  #if defined(__AVR_ATmega1280__)    // If AtMega1280 then Serial port 1...
	numc = Serial1.available();
  #else
	numc = Serial.available();
  #endif
  if (numc > 0)
    for (int i=0;i<numc;i++)  // Process bytes received
      {
	  #if defined(__AVR_ATmega1280__)
        data = Serial1.read();
      #else
		data = Serial.read();
	  #endif
      switch(UBX_step)     //Normally we start from zero. This is a state machine
      {
      case 0:  
        if(data==0xB5)  // UBX sync char 1
          UBX_step++;   //OH first data packet is correct, so jump to the next step
        break; 
      case 1:  
        if(data==0x62)  // UBX sync char 2
          UBX_step++;   //ooh! The second data packet is correct, jump to the step 2
        else 
          UBX_step=0;   //Nop, is not correct so restart to step zero and try again.     
        break;
      case 2:
        UBX_class=data;
        ubx_checksum(UBX_class);
        UBX_step++;
        break;
      case 3:
        UBX_id=data;
        ubx_checksum(UBX_id);
        UBX_step++;
        break;
      case 4:
        UBX_payload_length_hi=data;
        ubx_checksum(UBX_payload_length_hi);
        UBX_step++;
		// We check if the payload lenght is valid...
		if (UBX_payload_length_hi>=UBX_MAXPAYLOAD)
        {
		  if (PrintErrors)
			Serial.println("ERR:GPS_BAD_PAYLOAD_LENGTH!!");          
          UBX_step=0;   //Bad data, so restart to step zero and try again.     
          ck_a=0;
          ck_b=0;
        }
        break;
      case 5:
        UBX_payload_length_lo=data;
        ubx_checksum(UBX_payload_length_lo);
        UBX_step++;
		UBX_payload_counter=0;
        break;
      case 6:         // Payload data read...
	if (UBX_payload_counter < UBX_payload_length_hi)  // We stay in this state until we reach the payload_length
        {
          UBX_buffer[UBX_payload_counter] = data;
          ubx_checksum(data);
          UBX_payload_counter++;
          if (UBX_payload_counter==UBX_payload_length_hi)
            UBX_step++;
        }
        break;
      case 7:
        UBX_ck_a=data;   // First checksum byte
        UBX_step++;
        break;
      case 8:
        UBX_ck_b=data;   // Second checksum byte
       
	  // We end the GPS read...
        if((ck_a==UBX_ck_a)&&(ck_b==UBX_ck_b))   // Verify the received checksum with the generated checksum.. 
	  		parse_ubx_gps();               // Parse the new GPS packet
        else
		  {
		  if (PrintErrors)
			Serial.println("ERR:GPS_CHK!!");
		  }
        // Variable initialization
        UBX_step=0;
        ck_a=0;
        ck_b=0;
        GPS_timer=millis(); //Restarting timer...
        break;
	  }
    }    // End for...
  // If we don´t receive GPS packets in 2 seconds => Bad FIX state
  if ((millis() - GPS_timer)>2000)
    {
	Fix = 0;
	if (PrintErrors)
	  Serial.println("ERR:GPS_TIMEOUT!!");
    }
}

/****************************************************************
 * 
 ****************************************************************/
// Private Methods //////////////////////////////////////////////////////////////
void GPS_UBLOX_Class::parse_ubx_gps(void)
{
    Serial.println("parse_ubx_gps");
  int j;
//Verifing if we are in class 1, you can change this "IF" for a "Switch" in case you want to use other UBX classes.. 
//In this case all the message im using are in class 1, to know more about classes check PAGE 60 of DataSheet.
  if(UBX_class==0x01) 
  {
    switch(UBX_id)//Checking the UBX ID
    {
    case 0x02: //ID NAV-POSLLH 
      j=0;
      Time = join_4_bytes(&UBX_buffer[j]); // ms Time of week
      j+=4;
      Longitude = join_4_bytes(&UBX_buffer[j]); // lon*10000000
      j+=4;
      Lattitude = join_4_bytes(&UBX_buffer[j]); // lat*10000000
      j+=4;
      //Altitude = join_4_bytes(&UBX_buffer[j]);  // elipsoid heigth mm
      j+=4;
      Altitude = (float)join_4_bytes(&UBX_buffer[j]);  // MSL heigth mm
      //j+=4;
      /*
      hacc = (float)join_4_bytes(&UBX_buffer[j])/(float)1000;
      j+=4;
      vacc = (float)join_4_bytes(&UBX_buffer[j])/(float)1000;
      j+=4;
      */
      NewData=1;
      break;
    case 0x03://ID NAV-STATUS 
      //if(UBX_buffer[4] >= 0x03)
	  if((UBX_buffer[4] >= 0x03)&&(UBX_buffer[5]&0x01))        
        Fix=1; //valid position        
      else
        Fix=0; //invalid position
      break;

    case 0x06://ID NAV-SOL
      if((UBX_buffer[10] >= 0x03)&&(UBX_buffer[11]&0x01))
        Fix=1; //valid position
      else
        Fix=0; //invalid position        
      UBX_ecefVZ=join_4_bytes(&UBX_buffer[36]);  //Vertical Speed in cm/s
      NumSats=UBX_buffer[47];                    //Number of sats...     
      break;

    case 0x12:// ID NAV-VELNED 
      j=16;
      Speed_3d = join_4_bytes(&UBX_buffer[j]); // cm/s
      j+=4;
      Ground_Speed = join_4_bytes(&UBX_buffer[j]); // Ground speed 2D cm/s
      j+=4;
      Ground_Course = join_4_bytes(&UBX_buffer[j]); // Heading 2D deg*100000
      Ground_Course /= 1000;	// Rescale heading to deg * 100
      j+=4;
      /*
      sacc = join_4_bytes(&UBX_buffer[j]) // Speed accuracy
      j+=4;
      headacc = join_4_bytes(&UBX_buffer[j]) // Heading accuracy
      j+=4;
      */
      break; 
      }
    }   
}


/****************************************************************
 * 
 ****************************************************************/
 // Join 4 bytes into a long
long GPS_UBLOX_Class::join_4_bytes(unsigned char Buffer[])
{
  union long_union {
	int32_t dword;
	uint8_t  byte[4];
} longUnion;

  longUnion.byte[0] = *Buffer;
  longUnion.byte[1] = *(Buffer+1);
  longUnion.byte[2] = *(Buffer+2);
  longUnion.byte[3] = *(Buffer+3);
  return(longUnion.dword);
}

/****************************************************************
 * 
 ****************************************************************/
// Ublox checksum algorithm
void GPS_UBLOX_Class::ubx_checksum(byte ubx_data)
{
  ck_a+=ubx_data;
  ck_b+=ck_a; 
}


GPS_UBLOX_Class GPS;


//------------------------- end GPS LIB SOURCE 

//LED
int red = D0;
int green = D1;

//Beep
int beep = A0;

//Push Button
int button = D2;
int buttonVal = 0;
int buttonState = 0;
int oldButtonState = 0;

//Temperature
int temp = A7;
double temperature = 0.0;

//GPS
char gpsLocation[64];

//helper function to beep and blink
void beepandblink (int led, int numberOfBlinks)
{
    for(int i=0; i<numberOfBlinks; i++) {
        digitalWrite(led, HIGH);
        analogWrite(beep, 200);
        delay(1000);
        digitalWrite(led, LOW);
        analogWrite(beep, 0);
        delay(1000);
    }
}

//helper function to beep and blink
void shortbeepandblink (int led, int numberOfBlinks)
{
    for(int i=0; i<numberOfBlinks; i++) {
        digitalWrite(led, HIGH);
        analogWrite(beep, 200);
        delay(500);
        digitalWrite(led, LOW);
        analogWrite(beep, 0);
        delay(500);
    }
}

//helper function to reset Button
void resetButton() {
   buttonState = 0;
};

int processed(String p) {
   resetButton();
   Serial.println("information processed");
   return 1;
};

int accepted(String p) {
   beepandblink(green, 2);
   Serial.println("request accepted");
   return 1;
};

int alert(String p) {
   shortbeepandblink(red, 5);
   Serial.println("alert");
   return 1;
};

void setup()
{
    //define the REST API end points
    Spark.variable("temp", &temperature, DOUBLE);
    Spark.variable("gps", &gpsLocation, STRING);
    Spark.variable("bstate", &buttonState, INT);

    Spark.function("processed", processed);
	Spark.function("accepted", accepted);
	Spark.function("alert", alert);

    // Output pins
    pinMode(red, OUTPUT);
    pinMode(green, OUTPUT);
    pinMode(beep, OUTPUT);

    // Input pins
    pinMode(button, INPUT);
    pinMode(temp, INPUT);

    //For Spark.println debug statement
    Serial.begin(9600);
	//For GPS
	Serial1.begin(9600);
	
	// GPS Initialization
	GPS.Init();
    delay(1000); //wait for 1 secs so that the GPS will be ready
}

void readGPSInfo() 
{
    GPS.Read();
    if (GPS.NewData)  // New GPS data?
    {
        Serial.println("reading new data");
        Serial.print("GPS:");
        Serial.print(" Time:");
        Serial.print(GPS.Time);
        Serial.print(" Fix:");
        Serial.print((int)GPS.Fix);
        Serial.print(" Lat:");
        Serial.print(GPS.Lattitude);
        Serial.print(" Lon:");
        Serial.print(GPS.Longitude);
        Serial.print(" Alt:");
        Serial.print(GPS.Altitude/1000.0);
        Serial.print(" Speed:");
        Serial.print(GPS.Ground_Speed/100.0);
        Serial.print(" Course:");
        Serial.print(GPS.Ground_Course/100000.0);
        Serial.println();
        GPS.NewData = 0; // We have readed the data
    }
  sprintf(gpsLocation, "%.6f,%.6f", GPS.Lattitude/10000000.0, GPS.Longitude/10000000.0);
    
}

// This routine loops forever
void loop()
{
    //Push Button
    oldButtonState = buttonState;
    buttonVal = digitalRead(button);
    if(buttonVal == LOW)
    {
        buttonState = 1;
    }

    if (buttonState != oldButtonState && buttonState == 1)
    {
        beepandblink(red, 1);
    }

    //Temperature
    int reading = 0;
    double kelvin = 0.0;
    reading = analogRead(temp);
    kelvin = reading*(3.3/4096)*100;
    temperature = kelvin - 273;

    //GPS
    readGPSInfo();
    //Spark.publish("gpsloc", szInfo);

    //Debug statments
    Serial.println("Temperature: " + String(temperature));
    Serial.println("GPS: " + String(gpsLocation));
    
}